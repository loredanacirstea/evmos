// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: evmos/cronjobs/v1/cronjob.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Cronjob struct {
	Identifier      string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	EpochIdentifier string `protobuf:"bytes,2,opt,name=epoch_identifier,json=epochIdentifier,proto3" json:"epoch_identifier,omitempty"`
	// transaction to be executed
	ContractAddress string `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Input           string `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	Value           uint64 `protobuf:"varint,5,opt,name=value,proto3" json:"value,omitempty"`
	GasLimit        uint64 `protobuf:"varint,6,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	GasPrice        uint64 `protobuf:"varint,7,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	Sender          string `protobuf:"bytes,8,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *Cronjob) Reset()         { *m = Cronjob{} }
func (m *Cronjob) String() string { return proto.CompactTextString(m) }
func (*Cronjob) ProtoMessage()    {}
func (*Cronjob) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2a825fb44b322a3, []int{0}
}
func (m *Cronjob) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cronjob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cronjob.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Cronjob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cronjob.Merge(m, src)
}
func (m *Cronjob) XXX_Size() int {
	return m.Size()
}
func (m *Cronjob) XXX_DiscardUnknown() {
	xxx_messageInfo_Cronjob.DiscardUnknown(m)
}

var xxx_messageInfo_Cronjob proto.InternalMessageInfo

func (m *Cronjob) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *Cronjob) GetEpochIdentifier() string {
	if m != nil {
		return m.EpochIdentifier
	}
	return ""
}

func (m *Cronjob) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *Cronjob) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

func (m *Cronjob) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Cronjob) GetGasLimit() uint64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *Cronjob) GetGasPrice() uint64 {
	if m != nil {
		return m.GasPrice
	}
	return 0
}

func (m *Cronjob) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type CronjobsByEpochIdentifier struct {
	Identifiers []string `protobuf:"bytes,1,rep,name=identifiers,proto3" json:"identifiers,omitempty"`
}

func (m *CronjobsByEpochIdentifier) Reset()         { *m = CronjobsByEpochIdentifier{} }
func (m *CronjobsByEpochIdentifier) String() string { return proto.CompactTextString(m) }
func (*CronjobsByEpochIdentifier) ProtoMessage()    {}
func (*CronjobsByEpochIdentifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2a825fb44b322a3, []int{1}
}
func (m *CronjobsByEpochIdentifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CronjobsByEpochIdentifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CronjobsByEpochIdentifier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CronjobsByEpochIdentifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CronjobsByEpochIdentifier.Merge(m, src)
}
func (m *CronjobsByEpochIdentifier) XXX_Size() int {
	return m.Size()
}
func (m *CronjobsByEpochIdentifier) XXX_DiscardUnknown() {
	xxx_messageInfo_CronjobsByEpochIdentifier.DiscardUnknown(m)
}

var xxx_messageInfo_CronjobsByEpochIdentifier proto.InternalMessageInfo

func (m *CronjobsByEpochIdentifier) GetIdentifiers() []string {
	if m != nil {
		return m.Identifiers
	}
	return nil
}

func init() {
	proto.RegisterType((*Cronjob)(nil), "evmos.cronjobs.v1.Cronjob")
	proto.RegisterType((*CronjobsByEpochIdentifier)(nil), "evmos.cronjobs.v1.CronjobsByEpochIdentifier")
}

func init() { proto.RegisterFile("evmos/cronjobs/v1/cronjob.proto", fileDescriptor_c2a825fb44b322a3) }

var fileDescriptor_c2a825fb44b322a3 = []byte{
	// 309 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xcd, 0x4a, 0x33, 0x31,
	0x18, 0x85, 0x9b, 0xaf, 0xff, 0xf9, 0x16, 0x6a, 0x10, 0x89, 0x08, 0x71, 0xe8, 0xaa, 0x82, 0xcc,
	0x50, 0x74, 0xeb, 0xc2, 0x8a, 0x82, 0xe0, 0x42, 0xba, 0x74, 0x53, 0xd2, 0x4c, 0x6c, 0x23, 0xed,
	0x64, 0xc8, 0x9b, 0x0e, 0xf6, 0x2e, 0xbc, 0x2c, 0x97, 0x5d, 0xba, 0x94, 0xce, 0x75, 0x08, 0x32,
	0x49, 0xc7, 0x8e, 0xee, 0x72, 0x9e, 0xf3, 0x40, 0x78, 0x39, 0xf8, 0x54, 0x66, 0x0b, 0x0d, 0x91,
	0x30, 0x3a, 0x79, 0xd1, 0x13, 0x88, 0xb2, 0x41, 0xf9, 0x0e, 0x53, 0xa3, 0xad, 0x26, 0x07, 0x4e,
	0x08, 0x4b, 0x21, 0xcc, 0x06, 0xbd, 0x2f, 0x84, 0xdb, 0x37, 0x3e, 0x13, 0x86, 0xb1, 0x8a, 0x65,
	0x62, 0xd5, 0xb3, 0x92, 0x86, 0xa2, 0x00, 0xf5, 0xbb, 0xa3, 0x0a, 0x21, 0x67, 0x78, 0x5f, 0xa6,
	0x5a, 0xcc, 0xc6, 0x15, 0xeb, 0x9f, 0xb3, 0xf6, 0x1c, 0xbf, 0xff, 0xa5, 0x0a, 0x9d, 0x58, 0xc3,
	0x85, 0x1d, 0xf3, 0x38, 0x36, 0x12, 0x80, 0xd6, 0xbd, 0x5a, 0xf2, 0x6b, 0x8f, 0xc9, 0x21, 0x6e,
	0xaa, 0x24, 0x5d, 0x5a, 0xda, 0x70, 0xbd, 0x0f, 0x05, 0xcd, 0xf8, 0x7c, 0x29, 0x69, 0x33, 0x40,
	0xfd, 0xc6, 0xc8, 0x07, 0x72, 0x82, 0xbb, 0x53, 0x0e, 0xe3, 0xb9, 0x5a, 0x28, 0x4b, 0x5b, 0xae,
	0xe9, 0x4c, 0x39, 0x3c, 0x14, 0xb9, 0x2c, 0x53, 0xa3, 0x84, 0xa4, 0xed, 0x9f, 0xf2, 0xb1, 0xc8,
	0xe4, 0x08, 0xb7, 0x40, 0x26, 0xb1, 0x34, 0xb4, 0xe3, 0xbe, 0xd9, 0xa6, 0xde, 0x15, 0x3e, 0xde,
	0x9e, 0x0f, 0xc3, 0xd5, 0xed, 0x9f, 0x2b, 0x02, 0xfc, 0x7f, 0x77, 0x2a, 0x50, 0x14, 0xd4, 0xfb,
	0xdd, 0x51, 0x15, 0x0d, 0xef, 0xde, 0x37, 0x0c, 0xad, 0x37, 0x0c, 0x7d, 0x6e, 0x18, 0x7a, 0xcb,
	0x59, 0x6d, 0x9d, 0xb3, 0xda, 0x47, 0xce, 0x6a, 0x4f, 0xe7, 0x53, 0x65, 0x67, 0xcb, 0x49, 0x28,
	0xf4, 0x22, 0xb2, 0x33, 0x6e, 0x40, 0x41, 0xe4, 0xf7, 0xc9, 0x2e, 0xa3, 0xd7, 0xdd, 0x48, 0x76,
	0x95, 0x4a, 0x98, 0xb4, 0xdc, 0x40, 0x17, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x68, 0x2a, 0xe0,
	0xfa, 0xc3, 0x01, 0x00, 0x00,
}

func (m *Cronjob) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cronjob) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Cronjob) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintCronjob(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x42
	}
	if m.GasPrice != 0 {
		i = encodeVarintCronjob(dAtA, i, uint64(m.GasPrice))
		i--
		dAtA[i] = 0x38
	}
	if m.GasLimit != 0 {
		i = encodeVarintCronjob(dAtA, i, uint64(m.GasLimit))
		i--
		dAtA[i] = 0x30
	}
	if m.Value != 0 {
		i = encodeVarintCronjob(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Input) > 0 {
		i -= len(m.Input)
		copy(dAtA[i:], m.Input)
		i = encodeVarintCronjob(dAtA, i, uint64(len(m.Input)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintCronjob(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EpochIdentifier) > 0 {
		i -= len(m.EpochIdentifier)
		copy(dAtA[i:], m.EpochIdentifier)
		i = encodeVarintCronjob(dAtA, i, uint64(len(m.EpochIdentifier)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Identifier) > 0 {
		i -= len(m.Identifier)
		copy(dAtA[i:], m.Identifier)
		i = encodeVarintCronjob(dAtA, i, uint64(len(m.Identifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CronjobsByEpochIdentifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CronjobsByEpochIdentifier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CronjobsByEpochIdentifier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identifiers) > 0 {
		for iNdEx := len(m.Identifiers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Identifiers[iNdEx])
			copy(dAtA[i:], m.Identifiers[iNdEx])
			i = encodeVarintCronjob(dAtA, i, uint64(len(m.Identifiers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintCronjob(dAtA []byte, offset int, v uint64) int {
	offset -= sovCronjob(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Cronjob) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovCronjob(uint64(l))
	}
	l = len(m.EpochIdentifier)
	if l > 0 {
		n += 1 + l + sovCronjob(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovCronjob(uint64(l))
	}
	l = len(m.Input)
	if l > 0 {
		n += 1 + l + sovCronjob(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovCronjob(uint64(m.Value))
	}
	if m.GasLimit != 0 {
		n += 1 + sovCronjob(uint64(m.GasLimit))
	}
	if m.GasPrice != 0 {
		n += 1 + sovCronjob(uint64(m.GasPrice))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovCronjob(uint64(l))
	}
	return n
}

func (m *CronjobsByEpochIdentifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Identifiers) > 0 {
		for _, s := range m.Identifiers {
			l = len(s)
			n += 1 + l + sovCronjob(uint64(l))
		}
	}
	return n
}

func sovCronjob(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCronjob(x uint64) (n int) {
	return sovCronjob(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Cronjob) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCronjob
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cronjob: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cronjob: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCronjob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCronjob
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCronjob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCronjob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCronjob
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCronjob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCronjob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCronjob
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCronjob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCronjob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCronjob
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCronjob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCronjob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			m.GasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCronjob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			m.GasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCronjob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCronjob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCronjob
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCronjob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCronjob(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCronjob
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CronjobsByEpochIdentifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCronjob
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CronjobsByEpochIdentifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CronjobsByEpochIdentifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifiers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCronjob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCronjob
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCronjob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifiers = append(m.Identifiers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCronjob(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCronjob
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCronjob(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCronjob
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCronjob
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCronjob
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCronjob
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCronjob
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCronjob
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCronjob        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCronjob          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCronjob = fmt.Errorf("proto: unexpected end of group")
)
